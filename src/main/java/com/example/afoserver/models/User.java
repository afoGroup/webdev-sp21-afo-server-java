package com.example.afoserver.models;

import javax.persistence.*;
import java.util.*;

/**
 * A user object contains information about the AFO user's
 * username, password and usertype.
 */

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;         // database id autogenerated
    private String username; // username set by user
    private String password; // password set by user
    private String usertype; // otaku or weeb
    private String email;
    private String twitter;
    private String instagram;
    private String pictureURL;
    @Column(columnDefinition = "TEXT")
    private String bio;
    @OneToMany (
            mappedBy = "user",
            cascade = CascadeType.ALL,
            orphanRemoval = true
    )
    private List<UserClub> clubs = new ArrayList<>();

    /**
     * Default constructor for user.
     */
    public User() { }

    /**
     * Constructor for user that takes in username, password, and usertype.
     */
    public User(Long id, String username, String password, String usertype) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.usertype = usertype;
    }

    /**
     * Get the id of this object.
     * @return id a Long.
     */
    public Long getId() {
        return id;
    }

    /**
     * Get the usertype of this object.
     * @return usertype a String.
     */
    public String getUsertype() {
        return usertype;
    }

    /**
     * Set the usertype of this object
     * @param usertype a String.
     */
    public void setUsertype(String usertype) {
        this.usertype = usertype;
    }

    /**
     * Get the username of this object
     * @return username a String.
     */
    public String getUsername() {
        return username;
    }

    /**
     * Set the username of this object
     * @param username a String.
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Get the username of this object
     * @return password a String.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Set the password of this object
     * @param password a String.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getTwitter() {
        return twitter;
    }

    public void setTwitter(String twitter) {
        this.twitter = twitter;
    }

    public String getInstagram() {
        return instagram;
    }

    public void setInstagram(String instagram) {
        this.instagram = instagram;
    }

    public String getPictureURL() {
        return pictureURL;
    }

    public void setPictureURL(String pictureURL) {
        this.pictureURL = pictureURL;
    }

    public String getBio() {
        return bio;
    }

    public void setBio(String bio) {
        this.bio = bio;
    }

    public List<UserClub> getClubs() {
        return clubs;
    }

    public void setClubs(List<UserClub> clubs) {
        this.clubs = clubs;
    }

    public void addClub(Club club) {
        UserClub userClub = new UserClub(club, this);
        clubs.add(userClub);
        club.getUsers().add(userClub);
    }

    public void removeClub(Club club) {
        for (Iterator<UserClub> iterator = clubs.iterator();
             iterator.hasNext();) {
            UserClub userClub = iterator.next();

            if (userClub.getClub().equals(club) &&
                    userClub.getUser().equals(this)) {
                iterator.remove();
                userClub.getClub().getUsers().remove(userClub);
                userClub.setClub(null);
                userClub.setUser(null);
            }
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;

        if (o == null || getClass() != o.getClass())
            return false;

        User user = (User) o;
        return Objects.equals(username, user.username);
    }

    @Override
    public int hashCode() {
        return Objects.hash(username);
    }

}
